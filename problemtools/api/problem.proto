syntax = "proto3";

package omogen.problemtools;

// A problem parsed from a folder.
message Problem {
  // Metadata about the problem.
  Metadata metadata = 1;

  // All statements that were present in the problem.
  // They have no particular order.
  repeated ProblemStatement statements = 2;

  // All test groups that were present in the problem.
  // They have no particular order.
  repeated TestGroup test_groups = 3;
}

// Problem metadata is things relating to the problem, such as judging limits,
// sources, etc.
message Metadata {
  // The problem ID of the problem.
  // TODO: add constraints for the problem ID
  string problem_id = 1;

  // All the judging limits used for the problem.
  Limits limits = 2;

  string author = 3;

  License license = 4;
}

// A parsed problem statement, possibly in any language.
message ProblemStatement {
  // A language code, either just a language ("en") or a language with a
  // variatoin ("en-US")
  string language_code = 1;

  // The title of the problem statement.
  string title = 2;

  // The parsed HTML of the problem statement.
  string statement_html = 3;
}

// A test case group containing a set of testcases.
message TestGroup {
  // The test group name of the group, for example "samples".
  // TODO: add constraints for the name
  string name = 1;

  // Whether the cases of this group should be publically displayed in the
  // judge.
  bool public_samples = 2;

  // The test cases that this group consists of.
  repeated TestCase tests = 3;
}

// A single test case
message TestCase {
  // The name of the test case, for example "001-random".
  // TODO: add constraints for the name
  string name = 1;

  // An absolute path to the input file of the case.
  string input_path = 2;

  // An absolute path to the output file of the case.
  string output_path = 3;
}

// The judging limits of the problem.
message Limits {
  // The time limit for executing a test case in milliseconds.
  int32 time_limit_ms = 1;

  // The memory limit for executing a test case in megabytes.
  int32 memory_limit_kb = 2;
}

enum License {
  LICENSE_UNSPECIFIED = 0;
  CC_BY_SA_3 = 1;
  PUBLIC_DOMAIN = 2;
  BY_PERMISSION = 3;
}
