syntax = "proto3";

package omogen.runner;

import "runner/api/language.proto";
import "runner/api/program.proto";
import "runner/api/eval.proto";

// A request to compile a program.
message CompileRequest {
  // The program to compile.
  Program program = 1;

  // A folder to output the compiled program in.
  string output_path = 2;
}

// A response to a compilation request.
message CompileResponse {
  // The compiled program.
  CompiledProgram program = 1;

  // The output output from the compiler.
  string compilation_output = 2;

  // The error output from the compiler.
  string compilation_error = 3;
}

message CompileCachedRequest {
  string identifier = 1;
  CompileRequest request = 2;
}

message CompileCachedResponse {
  CompileResponse response = 1;
}

message GetLanguagesRequest {}

// A response with all installed languages.
message GetLanguagesResponse {
  // All supported languages supported on the machine.
  repeated Language installed_languages = 1;
}

// A request to evaluate an already compiled program on testdata.
message EvaluateRequest {
  int32 submission_id = 1;

  // The compiled program.
  CompiledProgram program = 2;

  // The test cases to evaluate the program on.
  // They will be evaluated in order.
  repeated TestCase cases = 3;

  int64 time_limit_ms = 4;
  int64 mem_limit_kb = 5;

  CustomValidator validator = 6;

  bool evaluate_all = 7;
}

message CustomValidator {
  CompiledProgram program = 1;
}

// A partial response to an evaluation.
message EvaluateResponse {
  // Depending on how far the evaluation has progressed, the result can be for
  // different things.
  oneof result {
    // If a test case was evaluated, test_case is set.
    TestCaseResult test_case = 1;
    // If the entire submission was evaluated, submission is set.
    SubmissionResult submission = 2;
  }
}

message SimpleRunRequest {
  CompiledProgram program = 1;

  repeated string input_files = 2;
}

message SimpleRunResult {
  string stdout = 1;
  string stderr = 2;
  int32 exit_code = 3;
  int32 signal = 4;
  bool timeout = 5;
}

message SimpleRunResponse {
  repeated SimpleRunResult results = 1;
}

// Runservice is capable of evaluating submissions. It also provides a list of
// installed languages together with their current versions.
service RunService {
  // Compile source files in a program, producing a compiled program.
  rpc Compile(CompileRequest) returns (CompileResponse) {}

  // Compile a program and store the results in a cache. If the program
  // existed in the cache, return that instead.
  rpc CompileCached(CompileCachedRequest) returns (CompileCachedResponse) {}

  // Evaluate a compiled submission.
  rpc Evaluate(EvaluateRequest) returns (stream EvaluateResponse) {}

  rpc SimpleRun(SimpleRunRequest) returns (SimpleRunResponse) {}

  // Fetch all supported languages of the machine hosting this service.
  rpc GetLanguages(GetLanguagesRequest) returns (GetLanguagesResponse) {}
}
