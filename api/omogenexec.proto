syntax = "proto3";

package omogenexec.api;

import "api/containerspec.proto";
import "api/execspec.proto";

// A request to execute a set of commands. If the container (i.e. not the
// executed commands themselves) crashed, the RPC fails with an INTERNAL error.
//
// Executions are made within a container, specified by a ContainerSpec. In the
// reuqest to the service, a ContainerSpec needs to be specified. Otherwise, the
// RPC will fail.  If several execution requests are sent in a stream, they will
// be executed within the same containre unless a new ContainerSpec is set (even
// if it has the same value).
message ExecuteRequest {
  // The command to execute.
  Execution execution = 1;

  // A container spec to replace the current container with.
  ContainerSpec container_spec = 2;
}

// The response to an ExecuteRequest.
message ExecuteResponse {
  // The result of the execution.
  Termination termination = 1;
}

// ExecuteService takes requests in the form of streams of commands to execute
// in a specified environment and runs them. It applies a set of resource limits
// to the commands and runs them isolated from each other and the host system.
service ExecuteService {
  rpc Execute(stream ExecuteRequest) returns (stream ExecuteResponse) {
  }
}
